% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graphToModel.R
\name{graphToModel}
\alias{graphToModel}
\title{convert a matrix of conectivity to a Boolean regulatory network in BoolNet format.}
\usage{
graphToModel(connectivityMatrix)
}
\value{
an object of class squad which represents a continuous interpolation of boolean network
models
}
\description{
graphToModel() convert a matrix of conectivity to a Boolean regulatory network in BoolNet format.
}
\details{
Algorithm:
Let A be the matrix of conectivity where {a_ij} = 1 (-1) iff the node i is positive (negative) regulator
and 0 if there is no interaction.
let positives (negatives) be the boolean input of the positive (negative) regulators. 
define b = min ( max(positives), 1 - max(negatives)  )
That is, it is assumed that the node j is going to be active iff at leat one of the positive regulators
is active and none of the negative regulators are active. 
let k be the number of regulators and f be the boolean function for the node i to be defined. 
f is a vector of boolean values of length 2**k that maps 
every boolean vector input of length k (ordered according to node indexes) to a boolean value.
1. Define an object of the class net BoolNet format.
2. Traverse the column of A[,j] and extract positive and negative regulators.
3. Define f[i] as b[x[i]] where x is the boolean vector representation of decimal number i from 1 to
      2**k.
4. Add the node and its function to the net object.
5. Repeat for every column in A.
}
\examples{
## random conectivity matrix of ten rows (=columns)
net <- randomMatrix(10)
graphToModel(net)
}
